name: üßÆ Deploy Calculator App

on:
  push:
    branches: [main]
    paths:
      - 'apps/calculator/**'
      - 'apps.json'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag for this deployment (e.g., v1.0.0)'
        required: false
        type: string
        default: ''

jobs:
  deploy-calculator:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment from GitHub Secrets
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          OWNER_ARNS_NAME: ${{ secrets.OWNER_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "Environment configured for calculator deployment."

      - name: Generate version info
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
            VERSION="${{ github.event.inputs.version_tag }}"
          else
            VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Calculator version: $VERSION"

      - name: Deploy Calculator App
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          OWNER_ARNS_NAME: ${{ secrets.OWNER_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "üßÆ Deploying Mobile Calculator App..."
          echo "üì¶ Version: ${{ steps.version.outputs.version }}"
          
          # Deploy the calculator app
          node deploy.js --app calculator --message "Calculator App ${{ steps.version.outputs.version }}"

      - name: Create Git Tag (if version provided)
        if: github.event.inputs.version_tag != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ github.event.inputs.version_tag }}" -m "Calculator App ${{ github.event.inputs.version_tag }}"
          git push origin "${{ github.event.inputs.version_tag }}"

      - name: Commit deployment logs
        if: always()
        run: |
          if [ -f "logs/deployments.json" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add logs/
            git commit -m "Update calculator deployment logs - ${{ steps.version.outputs.version }}" || echo "No changes to commit"
            git push origin main || echo "Nothing to push"
          fi

      - name: Trigger Announce Workflow
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üì¢ Triggering calculator announcement...');
            
            // Get the deployment hash from logs
            const fs = require('fs');
            let deploymentHash = '';
            
            try {
              if (fs.existsSync('logs/deployments.json')) {
                const logs = JSON.parse(fs.readFileSync('logs/deployments.json', 'utf8'));
                const latest = logs[logs.length - 1];
                if (latest && latest.success && (latest.undername || latest.commitHash)) {
                  deploymentHash = latest.undername || latest.commitHash;
                }
              }
            } catch (e) {
              console.log('‚ö†Ô∏è Could not read deployment logs:', e.message);
            }
            
            if (deploymentHash) {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'announce.yml',
                ref: 'main',
                inputs: {
                  deployment_hash: deploymentHash,
                  file_path: 'apps/calculator/index.html',
                  announce_type: 'discord',
                  custom_message: 'üßÆ Mobile Calculator App deployed! Check it out on Arweave.'
                }
              });
              console.log('‚úÖ Calculator announcement triggered with hash:', deploymentHash);
            } else {
              console.log('‚ö†Ô∏è No deployment hash found, skipping announcement');
            }