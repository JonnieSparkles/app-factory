name: üöÄ Deploy to Arweave

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      file_path:
        description: 'File to deploy (e.g., index.html, hello-world.txt)'
        required: true
        type: string
        default: 'index.html'
      message:
        description: 'Deployment message'
        required: false
        type: string
        default: 'Deployed via GitHub Actions'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment from GitHub Secrets
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          OWNER_ARNS_NAME: ${{ secrets.OWNER_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "Environment configured."

      - name: Detect Changed Files
        id: changed-files
        run: |
          echo "üîç Detecting changed files..."
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üìù Manual trigger detected"
            echo "files=${{ github.event.inputs.file_path }}" >> $GITHUB_OUTPUT
            echo "message=${{ github.event.inputs.message }}" >> $GITHUB_OUTPUT
          else
            echo "üîÑ Push to main detected - analyzing changes"
            
            # Get the list of changed files from the last commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "üìÅ Changed files: $CHANGED_FILES"
            
            # Filter for deployable files (exclude workflow files, logs, etc.)
            DEPLOYABLE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(txt|html|js|css|json|md)$' | grep -v '^\.github/' | grep -v '^logs/' | grep -v '^scripts/' | grep -v '^lib/' | grep -v '^reply-templates/' | grep -v '^package' | grep -v '^test\.js$' | grep -v '^deploy\.js$' || true)
            
            if [ -z "$DEPLOYABLE_FILES" ]; then
              echo "‚ö†Ô∏è No deployable files found in changes"
              echo "files=" >> $GITHUB_OUTPUT
              echo "message=No deployable files changed" >> $GITHUB_OUTPUT
            else
              echo "üì¶ Deployable files: $DEPLOYABLE_FILES"
              echo "files=$DEPLOYABLE_FILES" >> $GITHUB_OUTPUT
              echo "message=Auto-deployed changed files after merge to main" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Deploy to Arweave
        if: steps.changed-files.outputs.files != ''
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          OWNER_ARNS_NAME: ${{ secrets.OWNER_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "üöÄ Deploying changed files..."
          echo "üìÅ Files to deploy: ${{ steps.changed-files.outputs.files }}"
          echo "üí¨ Message: ${{ steps.changed-files.outputs.message }}"
          
          # Deploy each changed file
          for file in ${{ steps.changed-files.outputs.files }}; do
            if [ -f "$file" ]; then
              echo "üì§ Deploying: $file"
              npm run deploy -- --file "$file" --message "${{ steps.changed-files.outputs.message }}"
            else
              echo "‚ö†Ô∏è File not found: $file"
            fi
          done

      - name: Commit deployment logs
        if: always()
        run: |
          if [ -f "logs/deployments.json" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add logs/
            git commit -m "Update deployment logs" || echo "No changes to commit"
            git push origin main || echo "Nothing to push"
          fi

      - name: Trigger Announce Workflow
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üì¢ Triggering announce workflow...');
            
            // Get the deployment hash from logs
            const fs = require('fs');
            let deploymentHash = '';
            let filePath = 'hello-world.txt';
            
            try {
              if (fs.existsSync('logs/deployments.json')) {
                const logs = JSON.parse(fs.readFileSync('logs/deployments.json', 'utf8'));
                const latest = logs[logs.length - 1];
                if (latest && latest.success && (latest.undername || latest.commitHash)) {
                  deploymentHash = latest.undername || latest.commitHash;
                  filePath = latest.filePath || 'hello-world.txt';
                }
              }
            } catch (e) {
              console.log('‚ö†Ô∏è Could not read deployment logs:', e.message);
            }
            
            if (deploymentHash) {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'announce.yml',
                ref: 'main',
                inputs: {
                  deployment_hash: deploymentHash,
                  file_path: filePath,
                  announce_type: 'discord',
                  custom_message: 'Auto-announced after successful deployment'
                }
              });
              console.log('‚úÖ Announce workflow triggered successfully with hash:', deploymentHash);
            } else {
              console.log('‚ö†Ô∏è No deployment hash found, skipping announce trigger');
            }