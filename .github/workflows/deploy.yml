name: 🚀 Deploy to Arweave

on:
  workflow_run:
    workflows: ["Auto-merge Agent PRs"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      message:
        description: 'Deployment message'
        required: false
        type: string
        default: 'Manual deployment via GitHub Actions'

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if the auto-merge workflow succeeded or manual trigger
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone - we use hash-based change detection

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment from GitHub Secrets
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          ROOT_ARNS_NAME: ${{ secrets.ROOT_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          TURBO_USE_SHARED_CREDITS: ${{ secrets.TURBO_USE_SHARED_CREDITS }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "Environment configured."

      - name: Prepare Deployment
        id: prepare-deployment
        run: |
          echo "🚀 Preparing deployment for apps/ changes..."
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "📝 Manual trigger detected - deploying all apps"
            echo "message=${{ github.event.inputs.message }}" >> $GITHUB_OUTPUT
          else
            echo "🔄 Auto-triggered by merge with apps/ changes"
            echo "message=Auto-deployed after merge with apps/ changes" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Arweave
        id: deploy
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          ROOT_ARNS_NAME: ${{ secrets.ROOT_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          TURBO_USE_SHARED_CREDITS: ${{ secrets.TURBO_USE_SHARED_CREDITS }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "🚀 Deploying apps after merge with apps/ changes..."
          echo "💬 Message: ${{ steps.prepare-deployment.outputs.message }}"
          
          # Initialize deployment tracking
          DEPLOYMENT_SUCCESS=true
          DEPLOYMENT_ERRORS=""
          echo "deployed=false" >> $GITHUB_OUTPUT
          echo "apps_with_changes=0" >> $GITHUB_OUTPUT
          
          # Deploy all apps using dynamic detection
          echo "📱 Deploying all apps using dynamic detection..."
          
          # Use a different approach to avoid pipeline subshell issues
          APPS_WITH_CHANGES=0
          TOTAL_APPS=0
          
          for app_dir in apps/*/; do
            # Remove trailing slash
            app_dir=${app_dir%/}
                app_name=$(basename "$app_dir")
            echo "📁 Deploying app: $app_name"
            echo "----------------------------------------"
            
            # Run deployment and capture full output
            echo "🚀 Starting deployment for: $app_dir"
            DEPLOY_OUTPUT=$(node deploy.js --file "$app_dir" --message "${{ steps.prepare-deployment.outputs.message }}" 2>&1)
            DEPLOY_EXIT_CODE=$?
            
            # Display the full deployment output for detailed logging
            echo "📋 Full deployment output for $app_name:"
            echo "$DEPLOY_OUTPUT"
            
            # Check if the output indicates changes were made
            # First check for explicit "no changes" message
            if echo "$DEPLOY_OUTPUT" | grep -q "✅ No changes detected"; then
              echo "⏭️ App $app_name had no changes - skipped"
            # Then check for "Changed files: 0" pattern
            elif echo "$DEPLOY_OUTPUT" | grep -q "📁 Changed files: 0"; then
              echo "⏭️ App $app_name had no changes - skipped (0 files)"
            # Then check for any number of changed files > 0
            elif echo "$DEPLOY_OUTPUT" | grep -q "📁 Changed files: [1-9]"; then
              echo "✅ App $app_name had changes and was deployed"
              
              # Extract key deployment details from the output
              CHANGED_FILES_COUNT=$(echo "$DEPLOY_OUTPUT" | grep "📁 Changed files:" | sed 's/.*📁 Changed files: \([0-9]*\).*/\1/')
              MANIFEST_TX_ID=$(echo "$DEPLOY_OUTPUT" | grep "🔗 Manifest TX:" | sed 's/.*🔗 Manifest TX: \([^[:space:]]*\).*/\1/')
              ARNS_NAME=$(echo "$DEPLOY_OUTPUT" | grep "🔗 ArNS:" | sed 's/.*🔗 ArNS: \([^[:space:]]*\).*/\1/')
              TOTAL_SIZE=$(echo "$DEPLOY_OUTPUT" | grep "📦 Total size:" | sed 's/.*📦 Total size: \([^[:space:]]*\).*/\1/')
              DURATION=$(echo "$DEPLOY_OUTPUT" | grep "Duration:" | sed 's/.*Duration: \([^[:space:]]*\).*/\1/')
              
              # Display the key details in a clean format
              echo "   📁 Changed files: $CHANGED_FILES_COUNT"
              echo "   📦 Total size: $TOTAL_SIZE"
              echo "   ⏱️ Duration: $DURATION"
              if [ -n "$MANIFEST_TX_ID" ]; then
                echo "   🔗 Manifest TX: $MANIFEST_TX_ID"
              fi
              if [ -n "$ARNS_NAME" ]; then
                echo "   🏷️ ArNS: $ARNS_NAME"
              fi
              
              APPS_WITH_CHANGES=$((APPS_WITH_CHANGES + 1))
            else
              echo "⚠️ App $app_name - unclear deployment status"
              echo "📋 Deployment output (already shown above)"
            fi
            
            TOTAL_APPS=$((TOTAL_APPS + 1))
            
            if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
                  DEPLOYMENT_SUCCESS=false
                  echo "❌ Deployment failed for $app_name with exit code $DEPLOY_EXIT_CODE"
                  echo "📋 Error details from deployment output:"
                  echo "$DEPLOY_OUTPUT"
                  DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n❌ Failed to deploy app: $app_name (exit code: $DEPLOY_EXIT_CODE)"
                fi
              done
          
          # Report deployment results
          echo "📊 Deployment Summary:"
          echo "   📁 Total apps checked: $TOTAL_APPS"
          echo "   🔄 Apps with changes: $APPS_WITH_CHANGES"
          echo "   ⏭️ Apps skipped (no changes): $((TOTAL_APPS - APPS_WITH_CHANGES))"
          
          if [ "$DEPLOYMENT_SUCCESS" = "true" ]; then
            if [ $APPS_WITH_CHANGES -gt 0 ]; then
              echo "✅ Deployments completed successfully! $APPS_WITH_CHANGES apps updated."
              echo "deployed=true" >> $GITHUB_OUTPUT
              echo "apps_with_changes=$APPS_WITH_CHANGES" >> $GITHUB_OUTPUT
            else
              echo "✅ All apps checked - no changes detected, no deployments needed."
            echo "deployed=true" >> $GITHUB_OUTPUT
              echo "apps_with_changes=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Some deployments failed:"
            echo -e "$DEPLOYMENT_ERRORS"
            exit 1
          fi

      - name: Commit deployment logs and manifests
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Wait for any existing git lock to be released (prevent corruption)
          # This prevents conflicts with bot's git operations that use .git/deployment.lock
          echo "🔒 Checking for git locks..."
          while [ -f ".git/deployment.lock" ]; do
            echo "⏳ Waiting for git lock to be released..."
            sleep 2
          done
          
          # Add deployment logs if they exist
          if [ -f "logs/deployments.json" ]; then
            git add logs/
          fi
          
          # Add deployment tracker files and manifests from all apps
          find apps/ -name "deployment-tracker.json" -o -name "manifest.json" -o -name "manifest-overrides.json" | while read -r file; do
            if [ -f "$file" ]; then
              git add "$file"
            fi
          done
          
          # Commit if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "Update deployment logs and manifests" || echo "No changes to commit"
            git push origin main || echo "Nothing to push"
          else
            echo "No changes to commit"
          fi

      - name: Trigger Announce Workflow
        if: success() && steps.deploy.outputs.deployed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('📢 Triggering announce workflow...');
            
            const appsWithChanges = parseInt('${{ steps.deploy.outputs.apps_with_changes }}') || 0;
            const totalApps = 6; // We know we have 6 apps: hello-world, calculator, nsync-fanpage, recipe-cookbook, arcade, playdead
            
            // Get the deployment hash from logs (only if there were actual changes)
            const fs = require('fs');
            let deploymentHash = '';
            let filePath = 'deploy/hello-world.txt';
            
            if (appsWithChanges > 0) {
            try {
              if (fs.existsSync('logs/deployments.json')) {
                const logs = JSON.parse(fs.readFileSync('logs/deployments.json', 'utf8'));
                const latest = logs[logs.length - 1];
                if (latest && latest.success && (latest.undername || latest.commitHash)) {
                  deploymentHash = latest.undername || latest.commitHash;
                  filePath = latest.filePath || 'deploy/hello-world.txt';
                }
              }
            } catch (e) {
              console.log('⚠️ Could not read deployment logs:', e.message);
              }
            }
            
            // Determine announcement message based on deployment results
            let customMessage;
            if (appsWithChanges > 0) {
              customMessage = `🚀 Deployment successful! ${appsWithChanges} app${appsWithChanges > 1 ? 's' : ''} updated with new changes.`;
            } else {
              customMessage = `✅ Deployment check completed - no changes detected in any apps. All ${totalApps} apps are up to date!`;
            }
            
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'announce.yml',
                ref: 'main',
                inputs: {
                deployment_hash: deploymentHash || 'no-changes',
                  file_path: filePath,
                  announce_type: 'discord',
                custom_message: customMessage,
                apps_with_changes: appsWithChanges.toString(),
                total_apps: totalApps.toString()
                }
              });
            
            if (appsWithChanges > 0) {
              console.log('✅ Announce workflow triggered successfully with hash:', deploymentHash);
            } else {
              console.log('✅ Announce workflow triggered - no changes detected message');
            }