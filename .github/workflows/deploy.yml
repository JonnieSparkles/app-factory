name: üöÄ Deploy to Arweave

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      file_path:
        description: 'File to deploy (e.g., deploy/index.html, deploy/hello-world.txt)'
        required: false
        type: string
        default: ''
      message:
        description: 'Deployment message'
        required: false
        type: string
        default: 'Deployed via GitHub Actions'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch at least 2 commits to enable diff with HEAD~1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment from GitHub Secrets
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          OWNER_ARNS_NAME: ${{ secrets.OWNER_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "Environment configured."

      - name: Detect Changed Files
        id: changed-files
        run: |
          echo "üîç Detecting changed files..."
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.file_path }}" ]; then
            echo "üìù Manual trigger with file path detected"
            echo "files=${{ github.event.inputs.file_path }}" >> $GITHUB_OUTPUT
            echo "message=${{ github.event.inputs.message }}" >> $GITHUB_OUTPUT
            echo "deploy_type=manual" >> $GITHUB_OUTPUT
          else
            echo "üîÑ Push to main detected - analyzing changes"
            
            # Get the list of changed files from the last commit
            # Handle case where HEAD~1 doesn't exist (first commit or shallow clone)
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            else
              echo "‚ö†Ô∏è HEAD~1 not available (first commit or shallow clone), using all files from current commit"
              CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
            fi
            echo "üìÅ Changed files: $CHANGED_FILES"
            
            # Filter for deployable files from both deploy and apps folders
            DEPLOYABLE_FILES=$(echo "$CHANGED_FILES" | grep -E '^(deploy/|apps/)' | grep -E '\.(txt|html|js|css|json|md)$' || true)
            
            # Check for app factory changes
            APPS_FILES=$(echo "$CHANGED_FILES" | grep '^apps/' || true)
            DEPLOY_FILES=$(echo "$CHANGED_FILES" | grep '^deploy/' || true)
            
            if [ -z "$DEPLOYABLE_FILES" ]; then
              echo "‚ö†Ô∏è No deployable files found in changes"
              echo "files=" >> $GITHUB_OUTPUT
              echo "message=No deployable files changed" >> $GITHUB_OUTPUT
              echo "deploy_type=none" >> $GITHUB_OUTPUT
            else
              echo "üì¶ Deployable files: $DEPLOYABLE_FILES"
              echo "files=$DEPLOYABLE_FILES" >> $GITHUB_OUTPUT
              echo "message=Auto-deployed changed files after merge to main" >> $GITHUB_OUTPUT
              
              # Determine deployment type
              if [ -n "$APPS_FILES" ] && [ -n "$DEPLOY_FILES" ]; then
                echo "deploy_type=mixed" >> $GITHUB_OUTPUT
              elif [ -n "$APPS_FILES" ]; then
                echo "deploy_type=apps" >> $GITHUB_OUTPUT
              else
                echo "deploy_type=deploy" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: Deploy to Arweave
        if: steps.changed-files.outputs.files != ''
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          OWNER_ARNS_NAME: ${{ secrets.OWNER_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "üöÄ Deploying changed files..."
          echo "üìÅ Files to deploy: ${{ steps.changed-files.outputs.files }}"
          echo "üí¨ Message: ${{ steps.changed-files.outputs.message }}"
          echo "üéØ Deploy type: ${{ steps.changed-files.outputs.deploy_type }}"
          
          # Initialize deployment tracking
          DEPLOYMENT_SUCCESS=true
          DEPLOYMENT_ERRORS=""
          
          # Handle manual deployment
          if [ "${{ steps.changed-files.outputs.deploy_type }}" = "manual" ]; then
            echo "üìù Manual deployment detected"
            FILE_PATH="${{ steps.changed-files.outputs.files }}"
            
            # If file path doesn't start with deploy/ or apps/, try adding deploy/ prefix
            if [[ ! "$FILE_PATH" =~ ^(deploy/|apps/) ]]; then
              if [ -f "deploy/$FILE_PATH" ]; then
                FILE_PATH="deploy/$FILE_PATH"
                echo "üìÅ Adjusted file path to: $FILE_PATH"
              fi
            fi
            
            # Check if file exists
            if [ -f "$FILE_PATH" ]; then
              echo "üì§ Deploying: $FILE_PATH"
              
              # Check if it's an app directory (apps/*)
              if [[ "$FILE_PATH" =~ ^apps/ ]]; then
                # Extract app name from path
                APP_NAME=$(echo "$FILE_PATH" | sed 's|apps/\([^/]*\)/.*|\1|')
                echo "üì± Detected app deployment: $APP_NAME"
                if ! node deploy.js --app "$APP_NAME" --message "${{ steps.changed-files.outputs.message }}"; then
                  DEPLOYMENT_SUCCESS=false
                  DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå Failed to deploy app: $APP_NAME"
                fi
              else
                # Deploy as individual file
                if ! npm run deploy -- --file "$FILE_PATH" --message "${{ steps.changed-files.outputs.message }}"; then
                  DEPLOYMENT_SUCCESS=false
                  DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå Failed to deploy: $FILE_PATH"
                fi
              fi
            else
              echo "‚ö†Ô∏è File not found: $FILE_PATH"
              echo "üí° Available files in deploy/ directory:"
              ls -la deploy/ 2>/dev/null || echo "   (deploy/ directory not found)"
              echo "üí° Available apps:"
              ls -la apps/ 2>/dev/null || echo "   (apps/ directory not found)"
              echo "üí° Try using: deploy/hello-world.txt, deploy/index.html, or apps/calculator/index.html"
              DEPLOYMENT_SUCCESS=false
              DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå File not found: $FILE_PATH"
            fi
          else
            # Handle automatic deployments
            APPS_FILES=$(echo "${{ steps.changed-files.outputs.files }}" | grep '^apps/' || true)
            DEPLOY_FILES=$(echo "${{ steps.changed-files.outputs.files }}" | grep '^deploy/' || true)
            
            # Deploy apps using app factory if any apps/ files changed
            if [ -n "$APPS_FILES" ]; then
              echo "üì± Deploying apps using app factory..."
              # Extract unique app directories from changed files
              APP_DIRS=$(echo "$APPS_FILES" | sed 's|apps/\([^/]*\)/.*|\1|' | sort -u)
              for app_dir in $APP_DIRS; do
                echo "üì§ Deploying app: $app_dir"
                if ! node deploy.js --app "$app_dir" --message "${{ steps.changed-files.outputs.message }}"; then
                  DEPLOYMENT_SUCCESS=false
                  DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå Failed to deploy app: $app_dir"
                fi
              done
            fi
            
            # Deploy individual files from deploy/ directory
            if [ -n "$DEPLOY_FILES" ]; then
              echo "üìÅ Deploying individual files from deploy/ directory..."
              for file in $DEPLOY_FILES; do
                if [ -f "$file" ]; then
                  echo "üì§ Deploying: $file"
                  if ! npm run deploy -- --file "$file" --message "${{ steps.changed-files.outputs.message }}"; then
                    DEPLOYMENT_SUCCESS=false
                    DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå Failed to deploy: $file"
                  fi
                else
                  echo "‚ö†Ô∏è File not found: $file"
                  DEPLOYMENT_SUCCESS=false
                  DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå File not found: $file"
                fi
              done
            fi
          fi
          
          # Report deployment results
          if [ "$DEPLOYMENT_SUCCESS" = "true" ]; then
            echo "‚úÖ All deployments completed successfully!"
          else
            echo "‚ùå Some deployments failed:"
            echo -e "$DEPLOYMENT_ERRORS"
            exit 1
          fi

      - name: Commit deployment logs
        if: always()
        run: |
          if [ -f "logs/deployments.json" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add logs/
            git commit -m "Update deployment logs" || echo "No changes to commit"
            git push origin main || echo "Nothing to push"
          fi

      - name: Trigger Announce Workflow
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üì¢ Triggering announce workflow...');
            
            // Get the deployment hash from logs
            const fs = require('fs');
            let deploymentHash = '';
            let filePath = 'deploy/hello-world.txt';
            
            try {
              if (fs.existsSync('logs/deployments.json')) {
                const logs = JSON.parse(fs.readFileSync('logs/deployments.json', 'utf8'));
                const latest = logs[logs.length - 1];
                if (latest && latest.success && (latest.undername || latest.commitHash)) {
                  deploymentHash = latest.undername || latest.commitHash;
                  filePath = latest.filePath || 'deploy/hello-world.txt';
                }
              }
            } catch (e) {
              console.log('‚ö†Ô∏è Could not read deployment logs:', e.message);
            }
            
            if (deploymentHash) {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'announce.yml',
                ref: 'main',
                inputs: {
                  deployment_hash: deploymentHash,
                  file_path: filePath,
                  announce_type: 'discord',
                  custom_message: 'Auto-announced after successful deployment'
                }
              });
              console.log('‚úÖ Announce workflow triggered successfully with hash:', deploymentHash);
            } else {
              console.log('‚ö†Ô∏è No deployment hash found, skipping announce trigger');
            }