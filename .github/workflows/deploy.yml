name: üöÄ Deploy to Arweave

on:
  workflow_run:
    workflows: ["Auto-merge Agent PRs"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      file_path:
        description: 'File to deploy (e.g., deploy/index.html, deploy/hello-world.txt)'
        required: false
        type: string
        default: ''
      message:
        description: 'Deployment message'
        required: false
        type: string
        default: 'Deployed via GitHub Actions'

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if the auto-merge workflow succeeded or manual trigger
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone - we use hash-based change detection

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment from GitHub Secrets
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          OWNER_ARNS_NAME: ${{ secrets.OWNER_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "Environment configured."

      - name: Detect Changed Files
        id: changed-files
        run: |
          echo "üîç Using hash-based change detection in JavaScript deployment code..."
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.file_path }}" ]; then
            echo "üìù Manual trigger with file path detected"
            echo "files=${{ github.event.inputs.file_path }}" >> $GITHUB_OUTPUT
            echo "message=${{ github.event.inputs.message }}" >> $GITHUB_OUTPUT
            echo "deploy_type=manual" >> $GITHUB_OUTPUT
          else
            echo "üîÑ Push to main detected - using hash-based detection"
            echo "files=all" >> $GITHUB_OUTPUT
            echo "message=Auto-deployed using hash-based change detection" >> $GITHUB_OUTPUT
            echo "deploy_type=apps" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Arweave
        id: deploy
        if: steps.changed-files.outputs.files != ''
        env:
          ANT_PROCESS_ID: ${{ secrets.ANT_PROCESS_ID }}
          OWNER_ARNS_NAME: ${{ secrets.OWNER_ARNS_NAME }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          ARWEAVE_JWK_JSON: ${{ secrets.ARWEAVE_JWK_JSON }}
          TURBO_PAYMENT_SERVICE_URL: ${{ secrets.TURBO_PAYMENT_SERVICE_URL }}
          TURBO_UPLOAD_SERVICE_URL: ${{ secrets.TURBO_UPLOAD_SERVICE_URL }}
          APP_NAME: RemoteAgentDeploy
        run: |
          echo "üöÄ Deploying changed files..."
          echo "üìÅ Files to deploy: ${{ steps.changed-files.outputs.files }}"
          echo "üí¨ Message: ${{ steps.changed-files.outputs.message }}"
          echo "üéØ Deploy type: ${{ steps.changed-files.outputs.deploy_type }}"
          
          # Initialize deployment tracking
          DEPLOYMENT_SUCCESS=true
          DEPLOYMENT_ERRORS=""
          echo "deployed=false" >> $GITHUB_OUTPUT
          
          # Handle manual deployment
          if [ "${{ steps.changed-files.outputs.deploy_type }}" = "manual" ]; then
            echo "üìù Manual deployment detected"
            FILE_PATH="${{ steps.changed-files.outputs.files }}"
            
            # If file path doesn't start with apps/, try adding apps/ prefix
            if [[ ! "$FILE_PATH" =~ ^apps/ ]]; then
              # Try to find the app in apps directory
              POSSIBLE_APP=$(echo "$FILE_PATH" | cut -d'/' -f1)
              if [ -d "apps/$POSSIBLE_APP" ]; then
                FILE_PATH="apps/$FILE_PATH"
                echo "üìÅ Adjusted file path to: $FILE_PATH"
              fi
            fi
            
            # Check if file exists
            if [ -f "$FILE_PATH" ]; then
              echo "üì§ Deploying: $FILE_PATH"
              
              # Extract app name from path (apps/*)
              APP_NAME=$(echo "$FILE_PATH" | sed 's|apps/\([^/]*\)/.*|\1|')
              echo "üì± Detected app deployment: $APP_NAME"
              if ! node deploy.js --app "$APP_NAME" --message "${{ steps.changed-files.outputs.message }}"; then
                DEPLOYMENT_SUCCESS=false
                DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå Failed to deploy app: $APP_NAME"
              fi
            else
              echo "‚ö†Ô∏è File not found: $FILE_PATH"
              echo "üí° Available apps:"
              ls -la apps/ 2>/dev/null || echo "   (apps/ directory not found)"
              echo "üí° Try using an app name like: calculator, portfolio, etc."
              DEPLOYMENT_SUCCESS=false
              DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå File not found: $FILE_PATH"
            fi
          else
            # Handle automatic deployments using hash-based detection
            if [ "${{ steps.changed-files.outputs.files }}" = "all" ]; then
              echo "üì± Deploying all apps using hash-based change detection..."
              # Deploy all apps - the JavaScript code will handle change detection
              for app_dir in apps/*/; do
                if [ -d "$app_dir" ]; then
                  app_name=$(basename "$app_dir")
                  echo "üì§ Deploying app: $app_name"
                  if ! node deploy.js --app "$app_name" --message "${{ steps.changed-files.outputs.message }}"; then
                    DEPLOYMENT_SUCCESS=false
                    DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå Failed to deploy app: $app_name"
                  fi
                fi
              done
            else
              # Handle specific files (legacy support)
              FILES_LIST=$(echo "${{ steps.changed-files.outputs.files }}" | tr ' ' '\n')
              APPS_FILES=$(echo "$FILES_LIST" | grep '^apps/' || true)
              
              # Deploy apps using app factory
              if [ -n "$APPS_FILES" ]; then
                echo "üì± Deploying apps using app factory..."
                # Extract unique app directories from changed files
                APP_DIRS=$(echo "$APPS_FILES" | sed 's|apps/\([^/]*\)/.*|\1|' | sort -u)
                for app_dir in $APP_DIRS; do
                  echo "üì§ Deploying app: $app_dir"
                  if ! node deploy.js --app "$app_dir" --message "${{ steps.changed-files.outputs.message }}"; then
                    DEPLOYMENT_SUCCESS=false
                    DEPLOYMENT_ERRORS="$DEPLOYMENT_ERRORS\n‚ùå Failed to deploy app: $app_dir"
                  fi
                done
              fi
            fi
          fi
          
          # Report deployment results
          if [ "$DEPLOYMENT_SUCCESS" = "true" ]; then
            echo "‚úÖ All deployments completed successfully!"
            echo "deployed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some deployments failed:"
            echo -e "$DEPLOYMENT_ERRORS"
            exit 1
          fi

      - name: Commit deployment logs and manifests
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add logs if they exist
          if [ -f "logs/deployments.json" ]; then
            git add logs/
          fi
          
          # Add any updated app manifests and deployment trackers
          git add apps/*/manifest.json apps/*/deployment-tracker.json 2>/dev/null || true
          
          # Commit if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "Update deployment logs and manifests" || echo "No changes to commit"
            git push origin main || echo "Nothing to push"
          else
            echo "No changes to commit"
          fi

      - name: Trigger Announce Workflow
        if: success() && steps.deploy.outputs.deployed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üì¢ Triggering announce workflow...');
            
            // Get the deployment hash from logs
            const fs = require('fs');
            let deploymentHash = '';
            let filePath = 'deploy/hello-world.txt';
            
            try {
              if (fs.existsSync('logs/deployments.json')) {
                const logs = JSON.parse(fs.readFileSync('logs/deployments.json', 'utf8'));
                const latest = logs[logs.length - 1];
                if (latest && latest.success && (latest.undername || latest.commitHash)) {
                  deploymentHash = latest.undername || latest.commitHash;
                  filePath = latest.filePath || 'deploy/hello-world.txt';
                }
              }
            } catch (e) {
              console.log('‚ö†Ô∏è Could not read deployment logs:', e.message);
            }
            
            if (deploymentHash) {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'announce.yml',
                ref: 'main',
                inputs: {
                  deployment_hash: deploymentHash,
                  file_path: filePath,
                  announce_type: 'discord',
                  custom_message: 'Auto-announced after successful deployment'
                }
              });
              console.log('‚úÖ Announce workflow triggered successfully with hash:', deploymentHash);
            } else {
              console.log('‚ö†Ô∏è No deployment hash found, skipping announce trigger');
            }